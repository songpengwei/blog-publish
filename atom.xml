<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木鸟杂记</title>
  
  <subtitle>分布式系统，数据库，存储</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.qtmuniao.com/"/>
  <updated>2023-11-15T21:43:15.523Z</updated>
  <id>https://www.qtmuniao.com/</id>
  
  <author>
    <name>木鸟杂记</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用“隐喻”的方式帮你建立对 Raft 的直觉</title>
    <link href="https://www.qtmuniao.com/2023/11/15/raft-explain/"/>
    <id>https://www.qtmuniao.com/2023/11/15/raft-explain/</id>
    <published>2023-11-15T21:31:57.000Z</published>
    <updated>2023-11-15T21:43:15.523Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;相比 Paxos，Raft 的一大特色就是算法拆成了相对正交的几个部分——领导者选举、日志同步、状态持久化、日志压缩和配置变更。你如果对课程照目录看下就能看出来，除却最后一部分，这些模块就是我们课程 PartA ~ PartD 要分别实现的内容。将算法正交化拆分的好处是，让每个模块相对内聚，使得整体更易理解和实现——这也是 Raft 算法设计的初衷。&lt;/p&gt;
&lt;p&gt;下面我不打算采用&lt;strong&gt;精确&lt;/strong&gt;的方式来讲解每个模块——那是&lt;strong&gt;论文正文&lt;/strong&gt;和&lt;strong&gt;代码实现&lt;/strong&gt;要做的事情。相反，本章我将带领大家在&lt;strong&gt;感性&lt;/strong&gt;上建立一个对 Raft 基本概念（任期、选举）和两大流程（领导选举、日志同步）的认识。带着这个感性认识，大家可以再去仔细研读&lt;a href=&quot;https://raft.github.io/raft.pdf&quot;&gt;论文&lt;/a&gt;，想必能事半功倍地梳理出 Raft 算法中海量的细节。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="论文解读" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="raft" scheme="https://www.qtmuniao.com/tags/raft/"/>
    
  </entry>
  
  <entry>
    <title>构建和维护星球最强对象存储系统的一点微小经验</title>
    <link href="https://www.qtmuniao.com/2023/11/15/s3-experience/"/>
    <id>https://www.qtmuniao.com/2023/11/15/s3-experience/</id>
    <published>2023-11-15T21:29:38.000Z</published>
    <updated>2023-11-15T21:42:16.316Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文来自 Amazon S3 VP  &lt;a href=&quot;https://www.linkedin.com/in/andywarfield&quot;&gt;Andy Warfield&lt;/a&gt; 在 FAST 23 上的主旨演讲的&lt;a href=&quot;https://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html&quot;&gt;文字稿&lt;/a&gt;，总结了他们在构架和维护如此量级的对象存储 —— S3 的一些经验。我们知道，Amazon S3 是云时代最重要的存储基础设施之一，现在各家云厂商的对象存储基本都兼容 S3 接口，所有云原生的基础设施，比如云原生数据库，其最终存储都要落到对象存储上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="s3" scheme="https://www.qtmuniao.com/tags/s3/"/>
    
  </entry>
  
  <entry>
    <title>Firebolt：如何在十八个月内组装一个商业数据库</title>
    <link href="https://www.qtmuniao.com/2023/10/05/firebolt-paper/"/>
    <id>https://www.qtmuniao.com/2023/10/05/firebolt-paper/</id>
    <published>2023-10-05T16:23:25.000Z</published>
    <updated>2023-10-05T16:27:52.691Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;假如你是一个初创公司的 CTO，想迅速推出一款面向 AP 市场可用的数据库产品，还得有差异化的功能（不然谁会用一个新产品），你会怎么做呢？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.firebolt.io/&quot;&gt;Firebolt&lt;/a&gt; 在 2022 年专门发了一篇论文：&lt;a href=&quot;https://www.firebolt.io/content/firebolt-vldb-cdms-2022&quot;&gt;Assembling a Query Engine From Spare Parts&lt;/a&gt; 来讲这个事情。核心思想就是，&lt;strong&gt;利用开源组件，像攒台式机一样攒出一个数据库&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="论文解读" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="firebolt" scheme="https://www.qtmuniao.com/tags/firebolt/"/>
    
      <category term="paper" scheme="https://www.qtmuniao.com/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>【图解面试基础】三种基本排序算法</title>
    <link href="https://www.qtmuniao.com/2023/09/18/three-basic-sort/"/>
    <id>https://www.qtmuniao.com/2023/09/18/three-basic-sort/</id>
    <published>2023-09-18T08:47:16.000Z</published>
    <updated>2023-09-18T09:08:01.399Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是使用 &lt;a href=&quot;https://procreate.com/&quot; title=&quot;Procreate&quot;&gt;Procreate&lt;/a&gt; 画图之余，心血来潮开的一个&lt;a href=&quot;https://space.bilibili.com/30933812/channel/collectiondetail?sid=1655069&quot;&gt;面试基础系列&lt;/a&gt;，力求图文并茂、代码视频兼顾，做成最好看的面试系列。欢迎喜欢的小伙伴点赞、转发和打赏，如果支持的同学多，我就继续更下去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/09/18/g78B3XunFliWv6a.png&quot; alt=&quot;3-basic-sort.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.qtmuniao.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="算法" scheme="https://www.qtmuniao.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="algorithm" scheme="https://www.qtmuniao.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>知新的关键——类比</title>
    <link href="https://www.qtmuniao.com/2023/08/21/use-analogy-to-know-more/"/>
    <id>https://www.qtmuniao.com/2023/08/21/use-analogy-to-know-more/</id>
    <published>2023-08-21T15:47:15.000Z</published>
    <updated>2023-09-18T08:52:26.965Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这一年来，由于各种原因，需要不断地学新东西。于是如何高效地学习，就成了一个随之而来的问题。最近看了一些书和公开课，包括 Scott H Young 的 &lt;a href=&quot;https://book.douban.com/subject/11603298/&quot;&gt;Learn More, Study Less&lt;/a&gt;（以下简称 LMSL），和 Coursera 上的公开课&lt;a href=&quot;https://www.coursera.org/learn/ruhe-xuexi&quot;&gt;学会如何学习&lt;/a&gt;（Learning How to Learn，以下简称 LHL），发现了一些有意思的观点，趁着热乎（虽然都还没看完），记下来梳理一下，也希望能对大家有所启发。&lt;/p&gt;
&lt;p&gt;这两个资源在进行讲解时，都使用了&lt;strong&gt;类比&lt;/strong&gt;（analogy）。&lt;/p&gt;
&lt;p&gt;LMSL 中提出了&lt;strong&gt;整体学习法&lt;/strong&gt;（Holistic learning），其基本思想是：你不可能孤立地学会一个概念，而只能将其融入已有的概念体系中，从不同角度对其进行刻画来弄懂其内涵和外延。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.qtmuniao.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="类比" scheme="https://www.qtmuniao.com/tags/%E7%B1%BB%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>数据库面试的几个常见误区</title>
    <link href="https://www.qtmuniao.com/2023/08/21/database-interview-myth/"/>
    <id>https://www.qtmuniao.com/2023/08/21/database-interview-myth/</id>
    <published>2023-08-21T15:29:41.000Z</published>
    <updated>2023-08-21T08:36:22.944Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库面试的几个常见误区&quot;&gt;&lt;a href=&quot;#数据库面试的几个常见误区&quot; class=&quot;headerlink&quot; title=&quot;数据库面试的几个常见误区&quot;&gt;&lt;/a&gt;数据库面试的几个常见误区&lt;/h1&gt;&lt;p&gt;由于业务的需要，最近面试了很多数据库候选人。发现很多候选人在面试准备时会有一些普遍的误区，借此机会展开聊聊我作为面试官的一些建议。这次主要讲四个误区：代码基础差、工程素养弱、沟通思维无、知识框架碎。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="database" scheme="https://www.qtmuniao.com/tags/database/"/>
    
      <category term="面试" scheme="https://www.qtmuniao.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>生活工程学（一）：多轮次拆解</title>
    <link href="https://www.qtmuniao.com/2023/08/21/life-engineering-many-passes/"/>
    <id>https://www.qtmuniao.com/2023/08/21/life-engineering-many-passes/</id>
    <published>2023-08-21T15:19:43.000Z</published>
    <updated>2023-08-21T08:36:18.727Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们在工程实践中，有些构建代码的小技巧，其背后所体现的思想，生活中也常常可见。本系列便是这样一组跨越生活和工程的奇怪联想。这是第一篇：多轮次拆解，也即，&lt;strong&gt;很多我们习惯一遍完成的事情，有时候拆成多个轮次完成，会简单、高效很多&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在进行 code review 时，常看到一些新手同学在一个 for 循环中干太多事情。常会引起多层嵌套，或者 for 循环内容巨大无比。此时，如果不损失太多性能，我通常建议同学将要干的事情拆成多少个步骤，每个步骤一个 for 循环。甚至，可以每个步骤一个函数。&lt;/p&gt;
&lt;p&gt;当然，这些全是从维护角度着眼的。因为人一下总是记不了太多事情，一步步来，而不是揉在一块来，会让每个步骤逻辑清晰很多。后者，我通常称之为”&lt;strong&gt;摊大饼&lt;/strong&gt;“式代码，这种代码的特点是写时很自然，但是维护起来很费劲——细节揉在一起总会让复杂度爆炸。软件工程中的最小可用原型，也是类似的理念。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.qtmuniao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多轮次" scheme="https://www.qtmuniao.com/tags/%E5%A4%9A%E8%BD%AE%E6%AC%A1/"/>
    
      <category term="multi-passes" scheme="https://www.qtmuniao.com/tags/multi-passes/"/>
    
  </entry>
  
  <entry>
    <title>数据处理的大一统——从 Shell 脚本到 SQL 引擎</title>
    <link href="https://www.qtmuniao.com/2023/08/21/unify-data-processing/"/>
    <id>https://www.qtmuniao.com/2023/08/21/unify-data-processing/</id>
    <published>2023-08-21T14:44:11.000Z</published>
    <updated>2023-08-21T08:28:01.245Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;“工业流水线”的鼻祖，&lt;a href=&quot;https://www.youtube.com/watch?v=As0lqsd2-NI&quot;&gt;福特 T 型汽车&lt;/a&gt;的电机装配，将组装过程拆成 29 道工序，将装备时间由平均二十分钟降到五分钟，效率提升四倍 ，下图&lt;a href=&quot;https://www.motor1.com/features/178264/ford-model-t-factory-cutaway-kimble/&quot;&gt;图源&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/08/21/BrMe3j9oapmX8f2.png&quot; alt=&quot;T-model-car.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;这种流水线的思想在数据处理过程中也随处可见。其核心概念是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标准化的数据集合&lt;/strong&gt;：对应待组装对象，是对数据处理中各个环节输入输出的一种&lt;strong&gt;一致性抽象&lt;/strong&gt;。所谓一致，就是一个任意处理环节的输出，都可以作为任意处理环节的输入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可组合的数据变换&lt;/strong&gt;：对应单道组装工序，定义了对数据进行变换的一个&lt;strong&gt;原子&lt;/strong&gt;操作。通过组合各种原子操作，可以具有强大的表达力。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;则，数据处理的本质是：&lt;strong&gt;针对不同需求，读取并标准化数据集后，施加不同的变换组合&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="data processing" scheme="https://www.qtmuniao.com/tags/data-processing/"/>
    
  </entry>
  
  <entry>
    <title>NUMA-Aware 执行引擎论文解读</title>
    <link href="https://www.qtmuniao.com/2023/08/21/numa-aware-execution-engine/"/>
    <id>https://www.qtmuniao.com/2023/08/21/numa-aware-execution-engine/</id>
    <published>2023-08-21T14:01:39.000Z</published>
    <updated>2023-08-21T07:27:20.623Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近翻 DuckDB 的执行引擎相关的 PPT(&lt;a href=&quot;https://dsdsd.da.cwi.nl/slides/dsdsd-duckdb-push-based-execution.pdf&quot;&gt;Push-Based-Execution&lt;/a&gt;) 时，发现了这篇论文：&lt;a href=&quot;https://15721.courses.cs.cmu.edu/spring2016/papers/p743-leis.pdf&quot;&gt;Morsel-Driven Parallelism: A NUMA-Aware Query Evaluation Framework for the Many-Core Age&lt;/a&gt;。印象中在执行引擎相关的文章中看到他好几次；且 NUMA 架构对于现代数据库架构设计非常重要，但我对此了解尚浅，因此便找来读一读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从题目中也可以看到，论文最主要关键词有两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NUMA-Aware&lt;/li&gt;
&lt;li&gt;Morsel-Driven&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;据此，大致总结下论文的中心思想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多核时代，由于部分 CPU 和部分内存的绑定关系，CPU 访问内存是不均匀（NUMA）的。也即，对于某一个 CPU 核来说，本机上一部分内存访问延迟较低，另一部分内存延迟要高。&lt;/li&gt;
&lt;li&gt;传统火山模型，使用 Exchange 算子来进行并发。其他算子并不感知多线程，因此也就没办法就近内存调度计算（硬件亲和性）。也即，非 NUMA-local。&lt;/li&gt;
&lt;li&gt;为了解决此问题，论文在数据维度：对数据集进行水平分片，一个 NUMA-node 处理一个数据分片；对每个分片进行垂直分段（Morsel），在 Morsel 粒度上进行并发调度和抢占执行。&lt;/li&gt;
&lt;li&gt;在计算维度：为每个 CPU 预分配一个线程，在调度时，每个线程只接受数据块（Morsel）分配到本 NUMA-node 上的任务；当线程间子任务的执行进度不均衡时，快线程会”窃取“本应调度到其他线程的任务，从而保证一个 Query 的多个子任务大约同时完成，而不会出现”长尾“分片。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="论文解读" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="dadtabase" scheme="https://www.qtmuniao.com/tags/dadtabase/"/>
    
      <category term="NUMA" scheme="https://www.qtmuniao.com/tags/NUMA/"/>
    
  </entry>
  
  <entry>
    <title>20230819 B 站求职面试直播</title>
    <link href="https://www.qtmuniao.com/2023/08/19/live-show-infra-interview/"/>
    <id>https://www.qtmuniao.com/2023/08/19/live-show-infra-interview/</id>
    <published>2023-08-19T10:37:59.000Z</published>
    <updated>2023-08-19T04:36:09.756Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是我第一次在 b 站直播分享，录屏地址 &lt;a href=&quot;https://www.bilibili.com/video/BV1Fz4y1u79v&quot;&gt;https://www.bilibili.com/video/BV1Fz4y1u79v&lt;/a&gt; ，主要是从我的求职经历以及面试经历角度聊了一些关于 infra 找工作的注意点，并回答了同学一些现场问题。&lt;/p&gt;
&lt;h1 id=&quot;🐎-求职准备&quot;&gt;&lt;a href=&quot;#🐎-求职准备&quot; class=&quot;headerlink&quot; title=&quot;🐎 求职准备&quot;&gt;&lt;/a&gt;🐎 求职准备&lt;/h1&gt;&lt;h2 id=&quot;软素质&quot;&gt;&lt;a href=&quot;#软素质&quot; class=&quot;headerlink&quot; title=&quot;软素质&quot;&gt;&lt;/a&gt;软素质&lt;/h2&gt;&lt;p&gt;💁‍♂️ &lt;strong&gt;沟通&lt;/strong&gt;。面试时无论是经历描述，系统设计甚至写代码，沟通都是第一位的，这是面试各个环节顺利展开的前提。&lt;/p&gt;
&lt;p&gt;把一件事说清楚：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上下文：先和面试官对齐上下文，不要默认他比你知道的多。&lt;/li&gt;
&lt;li&gt;条理性：背景 → 需求 → 方案 → 挑战点 → 结果&lt;/li&gt;
&lt;li&gt;简洁性：就跟写文章一样，多过几遍就好了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;🧠 &lt;strong&gt;思维&lt;/strong&gt;。主要是&lt;strong&gt;抽象&lt;/strong&gt;和&lt;strong&gt;联想&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;抽象&lt;/strong&gt;。也可以说是归纳，或者叫&lt;strong&gt;知识聚簇&lt;/strong&gt;。以树来做类比，就是遍历几个子节点，抽象出其共通的父节点的特质，然后进而推演出新的子节点。比如调度问题（CPU 调度、分布式任务调度）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;联想&lt;/strong&gt;。也可以说是关联，或者叫&lt;strong&gt;跨域跳联&lt;/strong&gt;。以图来做类比，就是对于几个连通子图，在新的维度上给其建立通路。比如文字是思想的一种序列化。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="工作" scheme="https://www.qtmuniao.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="面试" scheme="https://www.qtmuniao.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="infra" scheme="https://www.qtmuniao.com/tags/infra/"/>
    
  </entry>
  
  <entry>
    <title>RocksDB 运行原理</title>
    <link href="https://www.qtmuniao.com/2023/06/05/how-rocksdb-works/"/>
    <id>https://www.qtmuniao.com/2023/06/05/how-rocksdb-works/</id>
    <published>2023-06-05T22:41:40.000Z</published>
    <updated>2023-08-21T06:53:25.600Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;RocksDB 是很多分布式数据库的底层存储，如 TiKV、CRDB、NebulaGraph 等等。在 DataDog 工作的 &lt;a href=&quot;https://artem.krylysov.com/&quot;&gt;Artem Krylysov&lt;/a&gt; 写了一篇&lt;a href=&quot;https://artem.krylysov.com/blog/2023/04/19/how-rocksdb-works/&quot;&gt;文章&lt;/a&gt;来对 RocksDB 做了一个科普，通俗易懂，在这里翻译下分享给大家。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;近几年，RocksDB 的采用率急速上升，俨然成为内嵌型键值存储（以下简称 kv 存储）的不二之选。&lt;/p&gt;
&lt;p&gt;目前，RocksDB 在 Meta、&lt;a href=&quot;https://blogs.bing.com/Engineering-Blog/october-2021/RocksDB-in-Microsoft-Bing&quot;&gt;Microsoft&lt;/a&gt;、&lt;a href=&quot;https://netflixtechblog.com/application-data-caching-using-ssds-5bf25df851ef&quot;&gt;Netflix&lt;/a&gt; 和 &lt;a href=&quot;https://www.uber.com/en-JP/blog/cherami-message-queue-system/&quot;&gt;Uber&lt;/a&gt; 等公司的生产环境上运行。在 &lt;a href=&quot;https://engineering.fb.com/2021/07/22/data-infrastructure/mysql/&quot;&gt;Meta&lt;/a&gt;，RocksDB 作为 MySQL 部署的存储引擎，为分布式图数据库（&lt;a href=&quot;https://www.qtmuniao.com/2021/10/07/facebook-tao/&quot;&gt;TAO&lt;/a&gt;）提供支持存储服务。&lt;/p&gt;
&lt;p&gt;大型科技公司并非 RocksDB 的仅有用户，像是 CockroachDB、Yugabyte、PingCAP 和 Rockset 等多个初创企业都构建在 RocksDB 基础之上。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://artem.krylysov.com/&quot;&gt;我&lt;/a&gt;在 Datadog 工作了 4 年时间，在生产环境中构建和运行了一系列基于 RocksDB 的服务。本文将就 RocksDB 的工作原理进行概要式讲解。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.qtmuniao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="rocksdb" scheme="https://www.qtmuniao.com/tags/rocksdb/"/>
    
      <category term="lsmtree" scheme="https://www.qtmuniao.com/tags/lsmtree/"/>
    
  </entry>
  
  <entry>
    <title>影响我写代码的三个 “Code”</title>
    <link href="https://www.qtmuniao.com/2023/03/25/how-to-read-and-write-code/"/>
    <id>https://www.qtmuniao.com/2023/03/25/how-to-read-and-write-code/</id>
    <published>2023-03-25T13:20:34.000Z</published>
    <updated>2023-11-29T16:48:59.273Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;国内很多大学的计算机专业，比较偏重基础和理论的“灌输”（就我当年上学的体验，现在可能会好一些），对于代码能力，虽然也有一些课程实验，但往往不太够用。于是，在进入正式工作前，很多同学就会对自己代码水平不太自信。下面我就根据我自身的写代码经历提供一些建议。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.qtmuniao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编程" scheme="https://www.qtmuniao.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="素养" scheme="https://www.qtmuniao.com/tags/%E7%B4%A0%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>Facebook Velox 运行机制全面解析</title>
    <link href="https://www.qtmuniao.com/2023/03/22/velox-task-analysis/"/>
    <id>https://www.qtmuniao.com/2023/03/22/velox-task-analysis/</id>
    <published>2023-03-22T20:00:33.000Z</published>
    <updated>2023-07-31T06:26:06.289Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://research.facebook.com/publications/velox-metas-unified-execution-engine/&quot;&gt;Facebook Velox&lt;/a&gt; 是一个针对 SQL 运行时的 C++ 库，旨在统一 Facebook 各种计算流，包括 Spark 和 Presto，使用推的模式、支持向量计算。&lt;/p&gt;
&lt;p&gt;Velox 接受一棵&lt;strong&gt;优化过的&lt;/strong&gt; &lt;code&gt;PlanNode&lt;/code&gt; Tree，然后将其切成一个个的线性的 &lt;code&gt;Pipeline&lt;/code&gt;，&lt;code&gt;Task&lt;/code&gt; 负责这个转变过程，每个 Task 针对一个 PlanTree Segment。大多数算子是一对一翻译的，但是有一些特殊的算子，通常出现在多个 Pipeline 的&lt;strong&gt;切口&lt;/strong&gt;处，通常来说，这些切口对应计划树的&lt;strong&gt;分叉处&lt;/strong&gt;，如 &lt;code&gt;HashJoinNode&lt;/code&gt;，&lt;code&gt;CrossJoinNode&lt;/code&gt;， &lt;code&gt;MergeJoinNode&lt;/code&gt; ，通常会翻译成 XXProbe 和 XXBuild。但也有一些例外，比如 &lt;code&gt;LocalPartitionNode&lt;/code&gt; 和 &lt;code&gt;LocalMergeNode&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="查询引擎" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%9F%A5%E8%AF%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="Runtime" scheme="https://www.qtmuniao.com/tags/Runtime/"/>
    
      <category term="执行引擎" scheme="https://www.qtmuniao.com/tags/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>2022 年终总结 —— 充实和迷茫</title>
    <link href="https://www.qtmuniao.com/2023/01/05/2022-summary/"/>
    <id>https://www.qtmuniao.com/2023/01/05/2022-summary/</id>
    <published>2023-01-05T00:06:33.000Z</published>
    <updated>2023-11-15T20:51:42.638Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;不知道为何，今年朋友圈分享年终总结的朋友格外多。我挺喜欢这个形式，一来，我很爱看别人的年终总结，看故事之余还能看到一些不同路径；二来，每年定期回顾下，也确实能帮着梳理下思路，简单做下展望。&lt;/p&gt;
&lt;p&gt;古代知识垄断的时代，只有帝王将相才能有纪传；而今信息爆炸的世代，人人皆可记之，为自己代言。于短期来说，年岁渐长，思虑日增，很多事不记下来，旬月便忘，通过年终回顾，日后回头追踪下自己思想变迁轨迹，也算三省吾身，冀有新得；于长期来说，我们终将作古，若借助互联网能留下个一鳞半爪，博后世一笑，也算雁过留声。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.qtmuniao.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://www.qtmuniao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="总结" scheme="https://www.qtmuniao.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>实现一个数据库需要如何入手？</title>
    <link href="https://www.qtmuniao.com/2022/12/11/how-to-build-a-database/"/>
    <id>https://www.qtmuniao.com/2022/12/11/how-to-build-a-database/</id>
    <published>2022-12-11T11:11:59.000Z</published>
    <updated>2023-11-15T20:51:42.638Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知乎上有个问题：如何实现一个数据库？手痒忍不住又水了一篇。以计算机中最常用的分析、理解问题的思想，我们可以从两个维度：&lt;strong&gt;逻辑&lt;/strong&gt;和&lt;strong&gt;物理&lt;/strong&gt;，来思考如何实现一个数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;逻辑维度&quot;&gt;&lt;a href=&quot;#逻辑维度&quot; class=&quot;headerlink&quot; title=&quot;逻辑维度&quot;&gt;&lt;/a&gt;逻辑维度&lt;/h2&gt;&lt;h3 id=&quot;数据模型（对外，面向用户）&quot;&gt;&lt;a href=&quot;#数据模型（对外，面向用户）&quot; class=&quot;headerlink&quot; title=&quot;数据模型（对外，面向用户）&quot;&gt;&lt;/a&gt;数据模型（对外，面向用户）&lt;/h3&gt;&lt;p&gt;想要实现一个数据库，首先你得定义给给用户什么样的&lt;strong&gt;数据模型&lt;/strong&gt;？在前些年，这些可能不是个问题，彼时，数据库约等于关系型数据，约等于 Oracle&amp;#x2F;SQLServer&amp;#x2F;MySQL&amp;#x2F;PostgreSQL 。但随着数据量的不断增大、用户需求的不断细化，关系模型已经不能一招鲜、吃遍天。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://www.qtmuniao.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="database" scheme="https://www.qtmuniao.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>DDIA 读书笔记（五）：冗余</title>
    <link href="https://www.qtmuniao.com/2022/10/17/ddia-reading-chapter5/"/>
    <id>https://www.qtmuniao.com/2022/10/17/ddia-reading-chapter5/</id>
    <published>2022-10-17T22:20:33.000Z</published>
    <updated>2023-11-15T20:51:44.349Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;DDIA 读书分享会，会逐章进行分享，结合我在工业界分布式存储和数据库的一些经验，补充一些细节。每两周左右分享一次，欢迎加入，Schedule 和所有文字稿在&lt;a href=&quot;https://ddia.qtmuniao.com/&quot;&gt;这里&lt;/a&gt;。我们有个对应的分布式&amp;amp;数据库讨论群，每次分享前会在群里通知。如想加入，可以加我的微信号：qtmuniao，简单自我介绍下，并注明：分布式系统群。另外，我的公众号：“木鸟杂记”，有更多的分布式系统、存储和数据库相关的文章，欢迎关注&lt;br&gt;本书第一部分讲单机数据系统，第二部分讲多机数据系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;冗余（Replication）&lt;/strong&gt; 是指将同一份数据复制多份，放到通过网络互联的多个机器上去。其好处有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;降低延迟&lt;/strong&gt;：可以在地理上同时接近不同地区的用户。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高可用性&lt;/strong&gt;：当系统部分故障时仍然能够正常提供服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高读吞吐&lt;/strong&gt;：平滑扩展可用于查询的机器。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;本章假设我们的数据系统中所有数据能够存放到一台机器中，则本章只需考虑多机冗余的问题。如果数据超过单机尺度该怎么办？那是下一章要解决的事情。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="DDIA" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/DDIA/"/>
    
    
      <category term="读书笔记" scheme="https://www.qtmuniao.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="DDIA" scheme="https://www.qtmuniao.com/tags/DDIA/"/>
    
      <category term="设计数据密集型应用" scheme="https://www.qtmuniao.com/tags/%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>好好写代码之素养篇——抽象和讲究</title>
    <link href="https://www.qtmuniao.com/2022/10/12/how-to-write-code-abstract/"/>
    <id>https://www.qtmuniao.com/2022/10/12/how-to-write-code-abstract/</id>
    <published>2022-10-12T22:00:07.000Z</published>
    <updated>2023-07-31T06:26:06.289Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知乎上有个问题，如何辨别一个程序员水平的高低？就这几年 Review 代码的体感，忍不住就工程素养这个话题吐两句槽，正好作为好好写代码系列的第二篇。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;思维体系&quot;&gt;&lt;a href=&quot;#思维体系&quot; class=&quot;headerlink&quot; title=&quot;思维体系&quot;&gt;&lt;/a&gt;思维体系&lt;/h2&gt;&lt;p&gt;水平差的程序员往往在“&lt;strong&gt;抽象&lt;/strong&gt;”上做的不好。&lt;/p&gt;
&lt;p&gt;什么是抽象能力呢？简言之，就是分门别类、触类旁通的能力。通过大量实践和书籍输入，将所解决过的问题进行正交分解，分解过的&lt;strong&gt;元知识&lt;/strong&gt;多具有很好地复用性；再利用这些元知识，进行组合推演，创造性的解决新遇到的问题。即归纳和演绎。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.qtmuniao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编程" scheme="https://www.qtmuniao.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="素养" scheme="https://www.qtmuniao.com/tags/%E7%B4%A0%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDB 的云原生之路 —— 流控策略的演进</title>
    <link href="https://www.qtmuniao.com/2022/09/24/dynamo-db-flow-control/"/>
    <id>https://www.qtmuniao.com/2022/09/24/dynamo-db-flow-control/</id>
    <published>2022-09-24T17:31:31.000Z</published>
    <updated>2023-07-31T06:26:06.289Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述：流控为啥重要&quot;&gt;&lt;a href=&quot;#概述：流控为啥重要&quot; class=&quot;headerlink&quot; title=&quot;概述：流控为啥重要&quot;&gt;&lt;/a&gt;概述：流控为啥重要&lt;/h2&gt;&lt;p&gt;上云的好处在于池化资源，让多租户共享，然后按需分配，从而降低成本。但进行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;多租户隔离&lt;/strong&gt;：用户要求可以使用其买到的流量，并且不会被其他租户影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源共享&lt;/strong&gt;：资源只能逻辑隔开，不能物理隔开，否则无法充分动态分配（超发）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;是一对相对矛盾的事情，我认为，也是云原生数据库最要解决的问题。不把这个问题解决好，则数据库：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;要么平台不赚钱&lt;/strong&gt;：比如资源静态预留，虽然可以让用户满意，总能随时用到卖给他的资源配额，但会存在巨大资源浪费，要么价格贵，要么用户不买单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要么用户不满意&lt;/strong&gt;：多用户共享物理资源，但非常容易进行互相影响，造成用户不能用到平台声称的配额。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;DynamoDB 从静态分配开始，逐步演化出一套全局和局部组合的准入控制机制，从而实现了物理上资源共享，但又在逻辑上给用户以配额隔离，从而实现了数据库真正的云原生。下面，我依据 &lt;a href=&quot;https://www.usenix.org/system/files/atc22-elhemali.pdf&quot;&gt;Amazon DynamoDB: A Scalable, Predictably Performant, and Fully Managed NoSQL Database Service&lt;/a&gt; 这篇论文披露的细节，对其流控机制的演进过程做一个梳理，以飨诸君。&lt;/p&gt;
&lt;p&gt;水平所限，谬误之处，欢迎随时指出。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="论文解读" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="DynamoDB" scheme="https://www.qtmuniao.com/tags/DynamoDB/"/>
    
      <category term="流控" scheme="https://www.qtmuniao.com/tags/%E6%B5%81%E6%8E%A7/"/>
    
      <category term="云原生数据库" scheme="https://www.qtmuniao.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>RocksDB 优化小解（一）：Indexing SST</title>
    <link href="https://www.qtmuniao.com/2022/08/21/rocksdb-file-indexer/"/>
    <id>https://www.qtmuniao.com/2022/08/21/rocksdb-file-indexer/</id>
    <published>2022-08-21T09:44:43.000Z</published>
    <updated>2023-07-31T06:26:06.289Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Google LevelDB 是一个 LSM-Tree 的实现典范。但在开源出来后，为了保持轻量、简洁的风格，除了修修 Bug 之外，一直没有做太大的更新迭代。为了让其能够满足工业环境中&lt;strong&gt;多样性的负载&lt;/strong&gt;， Facebook（Meta） 在 Fork 了 LevelDB 之后，做了多方面的优化。硬件方面，可以更有效地利用现代硬件，如闪存和快速磁盘、多核 CPU等；软件方面，针对读写路径、Compaction 也做了大量优化，如 SST 索引、索引分片、前缀 Bloom Filter、列族等。&lt;/p&gt;
&lt;p&gt;本系列文章，依据 &lt;a href=&quot;https://rocksdb.org/blog/&quot;&gt;RocksDB 系列博客&lt;/a&gt;，结合源码和一些使用经验，分享一些有趣的优化点，希望能对大家有所启发。水平所限，不当之处，欢迎留言讨论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇是 RocksDB 优化系列第一篇，为了优化深层查询性能，将不同层级的 SST 通过一定方式索引起来。&lt;/p&gt;
    
    </summary>
    
      <category term="源码阅读" scheme="https://www.qtmuniao.com/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="RocksDB" scheme="https://www.qtmuniao.com/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/RocksDB/"/>
    
    
      <category term="存储" scheme="https://www.qtmuniao.com/tags/%E5%AD%98%E5%82%A8/"/>
    
      <category term="RocksDB" scheme="https://www.qtmuniao.com/tags/RocksDB/"/>
    
  </entry>
  
  <entry>
    <title>步步为营 剖析事务中最难的——隔离性</title>
    <link href="https://www.qtmuniao.com/2022/07/07/db-isolation/"/>
    <id>https://www.qtmuniao.com/2022/07/07/db-isolation/</id>
    <published>2022-07-07T22:42:56.000Z</published>
    <updated>2023-07-31T06:26:06.289Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很久没有发文了，搞了一个月事务相关的资料和分享，今天用这篇文章做个小节。希望能给大家一些启发。&lt;/p&gt;
&lt;p&gt;说起数据库的事务，大家第一反应多是 ACID，但这几个属性的重要性和复杂度并不等同。其中，最难理解的当属&lt;strong&gt;隔离性&lt;/strong&gt;（I，Isolation）。造成这种理解困局的一个重要原因是，历史上对几种隔离级别的定义和实现耦合在了一块、不同厂商的的叫法和实现又常常挂羊头卖狗肉。本文试着从锁的角度来梳理下几种常见的隔离级别，用相对&lt;strong&gt;不精确&lt;/strong&gt;的叙述给大家建立一个直观感性的认识。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://www.qtmuniao.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="事务" scheme="https://www.qtmuniao.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="隔离性" scheme="https://www.qtmuniao.com/tags/%E9%9A%94%E7%A6%BB%E6%80%A7/"/>
    
  </entry>
  
</feed>
