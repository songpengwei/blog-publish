<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木鸟杂记</title>
  
  <subtitle>分布式系统，数据库，存储</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.qtmuniao.com/"/>
  <updated>2024-08-25T06:47:29.706Z</updated>
  <id>https://www.qtmuniao.com/</id>
  
  <author>
    <name>木鸟杂记</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Snowflake：云原生数仓的开创者</title>
    <link href="https://www.qtmuniao.com/2024/08/25/snowflake-paper/"/>
    <id>https://www.qtmuniao.com/2024/08/25/snowflake-paper/</id>
    <published>2024-08-25T06:41:07.000Z</published>
    <updated>2024-08-25T06:47:29.706Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Snowflake 由甲骨文的两位员工在 2012 年出来创办，一开始就瞄准云原生数仓，因此架构设计（在当时看来）非常“激进”。超前的视野带来超额的回报，Snowflake 在 2020 年正式上市，市值一度高达 700 亿美金，创造了史上规模最大的软件 IPO 记录。&lt;/p&gt;
&lt;p&gt;本文我们综合两篇论文：&lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/2882903.2903741&quot;&gt;The Snowflake Elastic Data Warehouse&lt;/a&gt; 和 &lt;a href=&quot;https://www.usenix.org/system/files/nsdi20-paper-vuppalapati.pdf&quot;&gt;Building An Elastic Query Engine on Disaggregated Storage&lt;/a&gt;  来大致聊聊其架构设计。&lt;/p&gt;
&lt;p&gt; 本文来自我的专栏《&lt;a href=&quot;https://xiaobot.net/p/system-thinking&quot;&gt;系统日知录&lt;/a&gt;》，如果你觉得文章还不错，欢迎订阅支持我。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章我早就想写了，但上次在看论文时卡住了——论文信息太多，地毯式的阅读，很快就淹没在细节中，当时也只看了三分之二，就搁置了。上周（20240707）在文章 &lt;a href=&quot;https://xiaobot.net/post/93d3e9ad-90f2-47ec-a942-ff95c351cba1&quot;&gt;Spark：如何在云上做缩容&lt;/a&gt;时提到了存算分离的 snowflake ，有读者要求写下，于是便重新捡起来。&lt;/p&gt;
&lt;p&gt;相比上次 push 的方式，本次采用 pull 的方式：即不是被动的读论文，而是先思考，如果让我设计这么一个云原生数仓，我要怎么设计，会有哪些问题等等。带着这些问题，我再去从论文中找答案，发现效率一下高了很多，也便让这篇文章没有再次难产。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="论文解读" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="数据库" scheme="https://www.qtmuniao.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="云原生" scheme="https://www.qtmuniao.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
      <category term="snowflake" scheme="https://www.qtmuniao.com/tags/snowflake/"/>
    
  </entry>
  
  <entry>
    <title>人生是旷野 —— 罗素《幸福之路》</title>
    <link href="https://www.qtmuniao.com/2024/07/28/listening-conquest-of-happiness/"/>
    <id>https://www.qtmuniao.com/2024/07/28/listening-conquest-of-happiness/</id>
    <published>2024-07-28T00:30:37.000Z</published>
    <updated>2024-07-28T00:45:03.979Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;缘于某个播客提了一嘴，便找来书在通勤时听了。这版是傅雷翻在 1939 年译的版本，有一股淡淡的老式白话风。小书不长，几天便听完。我喜欢在走路的时候听东西，所听入耳、所观入眼，哲人的凝言练语、街头的风物百态，总能在心里发生奇妙的化学反应，偶在三伏天都一激灵。&lt;/p&gt;
&lt;p&gt;最近心绪颇为起伏，在上下班踱步听这本书时，数次给我宽慰平和，书中指出的快乐和不快乐之因，都命中了我的某些缺点和特点，因此听完觉得还是要写点东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;罗素《幸福之路》&quot;&gt;&lt;a href=&quot;#罗素《幸福之路》&quot; class=&quot;headerlink&quot; title=&quot;罗素《幸福之路》&quot;&gt;&lt;/a&gt;罗素《幸福之路》&lt;/h1&gt;&lt;p&gt;人类从狩猎时代进入农耕时代后，虽获得了生活的相对安稳，却也失掉了向外的探索和冒险。到工业时代，城市化加剧，进一步脱离了自然的“蓝领白领”亦是如此。只有少数的企业家才仍然保持着丛林式的生活方式。&lt;/p&gt;
&lt;p&gt;选择安稳意味着有大量的“烦闷”（Boredom）需要排遣。但多数人过度的将注意力集中在自己的身上，比如畏罪狂（纠结于行为不符合少时的成见或社会的规训）、自溺狂（过度期待外界称许的虚荣）、自大狂（过度的权力欲望），则使得这种烦闷愈加在幻想中野蛮式的生长，直至占满人们的内心。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.qtmuniao.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="读书" scheme="https://www.qtmuniao.com/categories/%E7%94%9F%E6%B4%BB/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="https://www.qtmuniao.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="人生" scheme="https://www.qtmuniao.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>使用 ray.data 进行大规模数据处理（二）：全局视角</title>
    <link href="https://www.qtmuniao.com/2024/07/07/ray-data-2/"/>
    <id>https://www.qtmuniao.com/2024/07/07/ray-data-2/</id>
    <published>2024-07-07T13:03:33.000Z</published>
    <updated>2024-07-07T13:10:33.506Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://ray.data/&quot;&gt;ray.data&lt;/a&gt; 是基于 ray core 的一层封装。依赖 ray.data，用户用简单的代码，就可以实现数据大规模的异构处理（主要指同时使用 CPU 和 GPU）。一句话总结：很简单好用，同时也有很多坑。&lt;br&gt;在 &lt;a href=&quot;https://xiaobot.net/post/55c2d455-3319-4c7f-9e5e-4eb118a482d7&quot;&gt;上一篇&lt;/a&gt;中，我们从用户接口出发，浅浅地梳理了一下 &lt;a href=&quot;http://ray.data/&quot;&gt;ray.data&lt;/a&gt; 的主要接口。本篇，我们从宏观的角度，大概串一下 ray.data 的基本原理。之后，我们再用几篇，结合代码细节和使用经验，探讨下比较重要的几块内容：执行调度、数据格式和避坑指南。&lt;br&gt; 本文来自我的专栏《&lt;a href=&quot;https://xiaobot.net/p/system-thinking&quot;&gt;系统日知录&lt;/a&gt;》，如果你觉得文章还不错，欢迎订阅支持我。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;从高层来理解，ray.data 的一次数据处理任务大致可以分成前后相继的三阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据加载&lt;/strong&gt;：将数据从系统外部读到 ray 的 Object Store 中 （如 read_parquet）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据变换&lt;/strong&gt;：利用各种算子在 Object Store 中对数据进行变换（如 map&amp;#x2F;filter&amp;#x2F;repartition）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据写回&lt;/strong&gt;：将 Object Store 中的数据写回外部存储（如 write_parquet）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="架构" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="ray" scheme="https://www.qtmuniao.com/tags/ray/"/>
    
      <category term="数据处理" scheme="https://www.qtmuniao.com/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="大数据" scheme="https://www.qtmuniao.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>有趣的线性代数（一）：矩阵乘法</title>
    <link href="https://www.qtmuniao.com/2024/06/29/interesting-linear-algebra-1/"/>
    <id>https://www.qtmuniao.com/2024/06/29/interesting-linear-algebra-1/</id>
    <published>2024-06-29T13:23:11.000Z</published>
    <updated>2024-06-30T06:46:56.653Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于对各种矩阵运算物理意义的理解总是跟不上，因此尽管多年多次尝试入门机器学习，却总是被拒之门外。偶然间同事推荐了 &lt;a href=&quot;https://www.bilibili.com/video/BV16Z4y1U7oU&quot;&gt;MIT 那门经典的线性代数公开课&lt;/a&gt;，听了几节，煞是过瘾，之前紧闭的大门竟有打开一丝的感觉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，本系列会在每篇文章分享一些课程中有意思的点。为了避免晦涩，每章会尽可能去上下文、保持简短，请放心食用。也因此，本系列会牺牲一些精确性，且并无体系化，仅仅旨在唤起你一丢丢兴趣。注：例子都由 &lt;a href=&quot;https://kimi.moonshot.cn/&quot;&gt;KimiChat&lt;/a&gt; 生成。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="math" scheme="https://www.qtmuniao.com/categories/math/"/>
    
    
      <category term="线性代数" scheme="https://www.qtmuniao.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
      <category term="矩阵乘法" scheme="https://www.qtmuniao.com/tags/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Infra 面试之数据结构五：顺序组装</title>
    <link href="https://www.qtmuniao.com/2024/05/05/infra-interview-tcp/"/>
    <id>https://www.qtmuniao.com/2024/05/05/infra-interview-tcp/</id>
    <published>2024-05-05T02:49:31.000Z</published>
    <updated>2024-07-28T00:47:41.527Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是我在很早之前遇到的一个题，很有意思，所以到现在仍然记得。题意借用了 TCP 的上下文，要求实现 TCP 中一个“顺序组装”的关键逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于 TCP 层来说，IP 层的 packet 是乱序的收到。&lt;/li&gt;
&lt;li&gt;对于应用层来说，TCP 层交付的是顺序的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个题有意思的点在于，借用了 TCP 的上下文之后，就可以先和候选人讨论一些 TCP 的基础知识，然后话锋一转，引出这道题。这样既可以考察一些基础知识，也可以考察工程代码能力。&lt;/p&gt;
&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Packet&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint8_t&lt;/span&gt; *data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 实现一个“顺序交付”语义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;TCP&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 应用层调用：按顺序读取不超过 count 的字节数到 buf 中，并返回实际读到的字节数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *buf, &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; count)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// TCP 层回调：得到一些随机顺序的 IP 层封包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Packet* p)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// TCP 层回调：数据发完，连接关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="职场" scheme="https://www.qtmuniao.com/categories/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="面试" scheme="https://www.qtmuniao.com/categories/%E8%81%8C%E5%9C%BA/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://www.qtmuniao.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="TCP" scheme="https://www.qtmuniao.com/tags/TCP/"/>
    
      <category term="基础" scheme="https://www.qtmuniao.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于如何在晴天卖出 250 把雨伞这件事</title>
    <link href="https://www.qtmuniao.com/2024/04/08/paywall-one-year/"/>
    <id>https://www.qtmuniao.com/2024/04/08/paywall-one-year/</id>
    <published>2024-04-08T13:08:58.000Z</published>
    <updated>2024-04-08T13:12:44.045Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;说的就是我的大规模数据系统专栏《系统日知录》—— 有人问，在读了你的专栏文章后，可能很久之后&lt;del&gt;才可能会用到&lt;/del&gt;都不会用到，那为啥要买呢？何况，雨伞在雨天可是刚需，这专栏在面试的时候可不是。所以这实在不是一门好“生意”——&lt;strong&gt;受众狭窄、场景低频&lt;/strong&gt;，两者乘数，便是我这惨淡销量了。&lt;/p&gt;
&lt;p&gt;这也是为什么成功的专栏动辄上万次购买，而我只卖了个二百五，也敢把经历拿出来说一说了。万一你有类似的危险想法，也可以参考一二。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.qtmuniao.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="付费专栏" scheme="https://www.qtmuniao.com/tags/%E4%BB%98%E8%B4%B9%E4%B8%93%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>螺蛳壳里做道场：实现一个256KB的迷你文件系统</title>
    <link href="https://www.qtmuniao.com/2024/02/28/mini-filesystem/"/>
    <id>https://www.qtmuniao.com/2024/02/28/mini-filesystem/</id>
    <published>2024-02-28T02:22:16.000Z</published>
    <updated>2024-02-29T01:07:32.460Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要“编译”自书籍《&lt;a href=&quot;https://pages.cs.wisc.edu/~remzi/OSTEP/&quot;&gt;Operating Systems: Three Easy Pieces&lt;/a&gt;》第 40 章，这是一本非常深入浅出的书，推荐给所有对操作系统感到迷茫的同学。本文件系统基于一个非常小的硬盘空间，以&lt;strong&gt;数据结构&lt;/strong&gt;和&lt;strong&gt;读写流程&lt;/strong&gt;为主线，从零到一的推导出各个基本环节，可以帮你快速建立起对文件系统的直觉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文件系统基本都是构建于块存储之上的。但当然，现在的一些分布式文件系统，如 &lt;a href=&quot;https://github.com/juicedata/juicefs&quot;&gt;JuiceFS&lt;/a&gt;，底层是基于对象存储的。但无论块存储还是对象存储，其本质都是按 “数据块” 进行&lt;strong&gt;寻址&lt;/strong&gt;和&lt;strong&gt;数据交换&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;我们首先会探讨一个完整的文件系统在硬盘上的数据结构，也即布局；然后再通过打开关闭、读写流程将各个子模块串起来，从而完成对一个文件系统要点的覆盖。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.qtmuniao.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="文件系统" scheme="https://www.qtmuniao.com/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="文件" scheme="https://www.qtmuniao.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MemGraph 背后论文《基于内存和MVCC 的高速可串行化》详细解析（一）</title>
    <link href="https://www.qtmuniao.com/2024/02/06/memory-mvcc-serial/"/>
    <id>https://www.qtmuniao.com/2024/02/06/memory-mvcc-serial/</id>
    <published>2024-02-06T12:21:12.000Z</published>
    <updated>2024-02-06T12:28:56.304Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://memgraph.com/&quot;&gt;Memgraph&lt;/a&gt; 是一个内存型图数据库，使用 OpenCypher 作为查询语言，主打小数据量、低延迟的图场景。由于 Memgraph 是开源的（repo 在&lt;a href=&quot;https://github.com/memgraph/memgraph&quot;&gt;这&lt;/a&gt;，使用 C++ 实现）我们可以一窥其实现。根据&lt;a href=&quot;https://github.com/memgraph/memgraph/blob/master/src/storage/v2/storage.hpp#L57&quot;&gt;这行注释&lt;/a&gt;，我们可以看出，其内存结构实现灵感主要来自论文：&lt;a href=&quot;https://db.in.tum.de/~muehlbau/papers/mvcc.pdf&quot;&gt;Fast Serializable Multi-Version Concurrency Control for Main-Memory Database Systems&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本系列主要分为两大部分，&lt;strong&gt;论文解读&lt;/strong&gt;和&lt;strong&gt;代码串讲&lt;/strong&gt;，每一部分会根据情况拆成几篇。本篇，是论文解读（一），主要讲论文概述以及如何使用链表巧妙的存储了多版本、控制了可见性。论文解析（二）和（三），会讲如何实现可串行化以及回收多版本数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;从论文题目可以看出，本论文旨在实现一种针对&lt;strong&gt;内存型&lt;/strong&gt;数据库的、基于&lt;strong&gt;多版本&lt;/strong&gt;（MVCC）实现的、支持可&lt;strong&gt;串行化&lt;/strong&gt;隔离级别的高性能数据结构。其基本思想是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用列存&lt;/li&gt;
&lt;li&gt;复用 Undo Buffer 数据结构&lt;/li&gt;
&lt;li&gt;使用双向链表来串起数据的多版本&lt;/li&gt;
&lt;li&gt;巧妙设计时间戳来实现数据的可见性&lt;/li&gt;
&lt;li&gt;通过谓词树（PT）来判事务读集合（Read Set）是否被更改&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;与一般的多版本不同的是，本论文会在&lt;strong&gt;原地更新&lt;/strong&gt;数据，然后将旧版本数据“压”到链表中去，使用 “压”是因为链表采用头插法：表头一侧数据较新、表尾一侧数据较旧。所有数据的链表头由一个叫 &lt;code&gt;VersionVector&lt;/code&gt; 的数据结构维护，如果某一行没有旧数据，对应的位置就是 &lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="论文解读" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="memgraph" scheme="https://www.qtmuniao.com/tags/memgraph/"/>
    
      <category term="mvcc" scheme="https://www.qtmuniao.com/tags/mvcc/"/>
    
  </entry>
  
  <entry>
    <title>2023 年终总结——穷则思变</title>
    <link href="https://www.qtmuniao.com/2024/01/04/2023-summary/"/>
    <id>https://www.qtmuniao.com/2024/01/04/2023-summary/</id>
    <published>2024-01-04T06:24:17.000Z</published>
    <updated>2024-02-03T08:17:17.305Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/01/04/YQDIuMkiNGJmdtx.jpg&quot; alt=&quot;IMG_8879.JPG&quot;&gt;&lt;/p&gt;
&lt;p&gt;2023 年倏忽而过，事后来看，要用一个词来形容的话，就是——&lt;strong&gt;穷则思变&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;穷倒并非是物理上穷的吃不下饭，而是更接近穷则独善其身”中困顿的穷。思想上原先很多赖以生存的观念维持不下去了，因此经历了一个痛苦地重塑过程。这倒并非坏事，只不过其间被动的思想拉扯，现在想来仍然倍感折磨。当然，正是这些逆境逼迫我们跳出“群体思维”进行求索（think different），纵一时痛苦，却能有所得——每个人毕竟要走出属于自己的路。&lt;/p&gt;
&lt;p&gt;那这一年到底发生了哪些改变呢？&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.qtmuniao.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="年终总结" scheme="https://www.qtmuniao.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Y Combinator 2024 年关注 20 个创业领域</title>
    <link href="https://www.qtmuniao.com/2024/01/03/yc-2024-rfs/"/>
    <id>https://www.qtmuniao.com/2024/01/03/yc-2024-rfs/</id>
    <published>2024-01-03T06:07:04.000Z</published>
    <updated>2024-01-03T14:09:23.459Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ycombinator.com/&quot;&gt;Y Combinator&lt;/a&gt;（YC）是一家知名的美国创业加速器，自2005年成立以来致力于推动初创企业成功。作为初创企业界的领军人物，YC 的特点是，不仅提供资金，还提供指导、资源和网络，以帮助初创企业在竞争激烈的市场中脱颖而出。YC 的成功案例包括 Airbnb、Dropbox 和 Reddit 等，这些公司现在都是各自领域的巨头。&lt;br&gt;YC 发布的“创业公司征集请求”（&lt;a href=&quot;https://www.ycombinator.com/rfs&quot;&gt;RFS&lt;/a&gt;）是其基于对市场趋势、技术进步和全球挑战的深入理解，对全球创业社区的发出的一种前瞻性呼吁，相信能够对创业者和想选择创业公司的小伙伴们有诸多启发。2024 年的 RFS 一共有 20 个方向，这是上篇，包括前十个。如果看的人多，我再继续翻译后面 10 条。以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;虽然，我们投资过的最棒创业 idea，往往并不是一开始我们想找的，反而是那些无心插柳的。&lt;/p&gt;
&lt;p&gt;但仍然，我们对几类创业公司非常期待。以下是我们最新的 2024 版本的&lt;strong&gt;创业公司征集请求&lt;/strong&gt;（Requests for Startups，RFS），简述了下我们关注一些创业方向。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但并非说创业只有选择这些方向，才能够申请 Y Combinator。其实我们的多数投资仍然集中在过于一直关注的互联网和移动端。所以如果在阅读本文前，你已经有相关方向的创业想法，请继续做下去。&lt;br&gt;同样的，也不是说我们列了这些方向，你就要据此创立一家公司。RFS 的目的在于，如果你正好已经有一个类似的想法，那欢迎向我们申请。&lt;br&gt;另外，如果你想知道我们在寻求投资哪些类型的非盈利组织，可以看&lt;a href=&quot;https://www.ycombinator.com/blog/what-y-combinator-looks-for-in-nonprofits/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="创业" scheme="https://www.qtmuniao.com/categories/%E5%88%9B%E4%B8%9A/"/>
    
    
      <category term="YC" scheme="https://www.qtmuniao.com/tags/YC/"/>
    
      <category term="创业" scheme="https://www.qtmuniao.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>使用“隐喻”的方式帮你建立对 Raft 的直觉</title>
    <link href="https://www.qtmuniao.com/2023/11/15/raft-explain/"/>
    <id>https://www.qtmuniao.com/2023/11/15/raft-explain/</id>
    <published>2023-11-15T13:31:57.000Z</published>
    <updated>2023-11-15T21:43:15.523Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;相比 Paxos，Raft 的一大特色就是算法拆成了相对正交的几个部分——领导者选举、日志同步、状态持久化、日志压缩和配置变更。你如果对课程照目录看下就能看出来，除却最后一部分，这些模块就是我们课程 PartA ~ PartD 要分别实现的内容。将算法正交化拆分的好处是，让每个模块相对内聚，使得整体更易理解和实现——这也是 Raft 算法设计的初衷。&lt;/p&gt;
&lt;p&gt;下面我不打算采用&lt;strong&gt;精确&lt;/strong&gt;的方式来讲解每个模块——那是&lt;strong&gt;论文正文&lt;/strong&gt;和&lt;strong&gt;代码实现&lt;/strong&gt;要做的事情。相反，本章我将带领大家在&lt;strong&gt;感性&lt;/strong&gt;上建立一个对 Raft 基本概念（任期、选举）和两大流程（领导选举、日志同步）的认识。带着这个感性认识，大家可以再去仔细研读&lt;a href=&quot;https://raft.github.io/raft.pdf&quot;&gt;论文&lt;/a&gt;，想必能事半功倍地梳理出 Raft 算法中海量的细节。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="论文解读" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="raft" scheme="https://www.qtmuniao.com/tags/raft/"/>
    
  </entry>
  
  <entry>
    <title>构建和维护星球最强对象存储系统的一点微小经验</title>
    <link href="https://www.qtmuniao.com/2023/11/15/s3-experience/"/>
    <id>https://www.qtmuniao.com/2023/11/15/s3-experience/</id>
    <published>2023-11-15T13:29:38.000Z</published>
    <updated>2024-03-04T01:23:33.620Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文来自 Amazon S3 VP  &lt;a href=&quot;https://www.linkedin.com/in/andywarfield&quot;&gt;Andy Warfield&lt;/a&gt; 在 FAST 23 上的主旨演讲的&lt;a href=&quot;https://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html&quot;&gt;文字稿&lt;/a&gt;，总结了他们在构架和维护如此量级的对象存储 —— S3 的一些经验。我们知道，Amazon S3 是云时代最重要的存储基础设施之一，现在各家云厂商的对象存储基本都兼容 S3 接口，所有云原生的基础设施，比如云原生数据库，其最终存储都要落到对象存储上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="s3" scheme="https://www.qtmuniao.com/tags/s3/"/>
    
  </entry>
  
  <entry>
    <title>Firebolt：如何在十八个月内组装一个商业数据库</title>
    <link href="https://www.qtmuniao.com/2023/10/05/firebolt-paper/"/>
    <id>https://www.qtmuniao.com/2023/10/05/firebolt-paper/</id>
    <published>2023-10-05T09:23:25.000Z</published>
    <updated>2023-10-05T16:27:52.691Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;假如你是一个初创公司的 CTO，想迅速推出一款面向 AP 市场可用的数据库产品，还得有差异化的功能（不然谁会用一个新产品），你会怎么做呢？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.firebolt.io/&quot;&gt;Firebolt&lt;/a&gt; 在 2022 年专门发了一篇论文：&lt;a href=&quot;https://www.firebolt.io/content/firebolt-vldb-cdms-2022&quot;&gt;Assembling a Query Engine From Spare Parts&lt;/a&gt; 来讲这个事情。核心思想就是，&lt;strong&gt;利用开源组件，像攒台式机一样攒出一个数据库&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="论文解读" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="firebolt" scheme="https://www.qtmuniao.com/tags/firebolt/"/>
    
      <category term="paper" scheme="https://www.qtmuniao.com/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>【图解面试基础】三种基本排序算法</title>
    <link href="https://www.qtmuniao.com/2023/09/18/three-basic-sort/"/>
    <id>https://www.qtmuniao.com/2023/09/18/three-basic-sort/</id>
    <published>2023-09-18T01:47:16.000Z</published>
    <updated>2023-09-18T09:08:01.399Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是使用 &lt;a href=&quot;https://procreate.com/&quot; title=&quot;Procreate&quot;&gt;Procreate&lt;/a&gt; 画图之余，心血来潮开的一个&lt;a href=&quot;https://space.bilibili.com/30933812/channel/collectiondetail?sid=1655069&quot;&gt;面试基础系列&lt;/a&gt;，力求图文并茂、代码视频兼顾，做成最好看的面试系列。欢迎喜欢的小伙伴点赞、转发和打赏，如果支持的同学多，我就继续更下去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/09/18/g78B3XunFliWv6a.png&quot; alt=&quot;3-basic-sort.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.qtmuniao.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="算法" scheme="https://www.qtmuniao.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="algorithm" scheme="https://www.qtmuniao.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>知新的关键——类比</title>
    <link href="https://www.qtmuniao.com/2023/08/21/use-analogy-to-know-more/"/>
    <id>https://www.qtmuniao.com/2023/08/21/use-analogy-to-know-more/</id>
    <published>2023-08-21T08:47:15.000Z</published>
    <updated>2023-09-18T08:52:26.965Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这一年来，由于各种原因，需要不断地学新东西。于是如何高效地学习，就成了一个随之而来的问题。最近看了一些书和公开课，包括 Scott H Young 的 &lt;a href=&quot;https://book.douban.com/subject/11603298/&quot;&gt;Learn More, Study Less&lt;/a&gt;（以下简称 LMSL），和 Coursera 上的公开课&lt;a href=&quot;https://www.coursera.org/learn/ruhe-xuexi&quot;&gt;学会如何学习&lt;/a&gt;（Learning How to Learn，以下简称 LHL），发现了一些有意思的观点，趁着热乎（虽然都还没看完），记下来梳理一下，也希望能对大家有所启发。&lt;/p&gt;
&lt;p&gt;这两个资源在进行讲解时，都使用了&lt;strong&gt;类比&lt;/strong&gt;（analogy）。&lt;/p&gt;
&lt;p&gt;LMSL 中提出了&lt;strong&gt;整体学习法&lt;/strong&gt;（Holistic learning），其基本思想是：你不可能孤立地学会一个概念，而只能将其融入已有的概念体系中，从不同角度对其进行刻画来弄懂其内涵和外延。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.qtmuniao.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="类比" scheme="https://www.qtmuniao.com/tags/%E7%B1%BB%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>数据库面试的几个常见误区</title>
    <link href="https://www.qtmuniao.com/2023/08/21/database-interview-myth/"/>
    <id>https://www.qtmuniao.com/2023/08/21/database-interview-myth/</id>
    <published>2023-08-21T08:29:41.000Z</published>
    <updated>2023-08-21T08:36:22.944Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库面试的几个常见误区&quot;&gt;&lt;a href=&quot;#数据库面试的几个常见误区&quot; class=&quot;headerlink&quot; title=&quot;数据库面试的几个常见误区&quot;&gt;&lt;/a&gt;数据库面试的几个常见误区&lt;/h1&gt;&lt;p&gt;由于业务的需要，最近面试了很多数据库候选人。发现很多候选人在面试准备时会有一些普遍的误区，借此机会展开聊聊我作为面试官的一些建议。这次主要讲四个误区：代码基础差、工程素养弱、沟通思维无、知识框架碎。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="database" scheme="https://www.qtmuniao.com/tags/database/"/>
    
      <category term="面试" scheme="https://www.qtmuniao.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>生活工程学（一）：多轮次拆解</title>
    <link href="https://www.qtmuniao.com/2023/08/21/life-engineering-many-passes/"/>
    <id>https://www.qtmuniao.com/2023/08/21/life-engineering-many-passes/</id>
    <published>2023-08-21T08:19:43.000Z</published>
    <updated>2023-08-21T08:36:18.727Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们在工程实践中，有些构建代码的小技巧，其背后所体现的思想，生活中也常常可见。本系列便是这样一组跨越生活和工程的奇怪联想。这是第一篇：多轮次拆解，也即，&lt;strong&gt;很多我们习惯一遍完成的事情，有时候拆成多个轮次完成，会简单、高效很多&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在进行 code review 时，常看到一些新手同学在一个 for 循环中干太多事情。常会引起多层嵌套，或者 for 循环内容巨大无比。此时，如果不损失太多性能，我通常建议同学将要干的事情拆成多少个步骤，每个步骤一个 for 循环。甚至，可以每个步骤一个函数。&lt;/p&gt;
&lt;p&gt;当然，这些全是从维护角度着眼的。因为人一下总是记不了太多事情，一步步来，而不是揉在一块来，会让每个步骤逻辑清晰很多。后者，我通常称之为”&lt;strong&gt;摊大饼&lt;/strong&gt;“式代码，这种代码的特点是写时很自然，但是维护起来很费劲——细节揉在一起总会让复杂度爆炸。软件工程中的最小可用原型，也是类似的理念。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.qtmuniao.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多轮次" scheme="https://www.qtmuniao.com/tags/%E5%A4%9A%E8%BD%AE%E6%AC%A1/"/>
    
      <category term="multi-passes" scheme="https://www.qtmuniao.com/tags/multi-passes/"/>
    
  </entry>
  
  <entry>
    <title>数据处理的大一统——从 Shell 脚本到 SQL 引擎</title>
    <link href="https://www.qtmuniao.com/2023/08/21/unify-data-processing/"/>
    <id>https://www.qtmuniao.com/2023/08/21/unify-data-processing/</id>
    <published>2023-08-21T07:44:11.000Z</published>
    <updated>2023-08-21T08:28:01.245Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;“工业流水线”的鼻祖，&lt;a href=&quot;https://www.youtube.com/watch?v=As0lqsd2-NI&quot;&gt;福特 T 型汽车&lt;/a&gt;的电机装配，将组装过程拆成 29 道工序，将装备时间由平均二十分钟降到五分钟，效率提升四倍 ，下图&lt;a href=&quot;https://www.motor1.com/features/178264/ford-model-t-factory-cutaway-kimble/&quot;&gt;图源&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/08/21/BrMe3j9oapmX8f2.png&quot; alt=&quot;T-model-car.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;这种流水线的思想在数据处理过程中也随处可见。其核心概念是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标准化的数据集合&lt;/strong&gt;：对应待组装对象，是对数据处理中各个环节输入输出的一种&lt;strong&gt;一致性抽象&lt;/strong&gt;。所谓一致，就是一个任意处理环节的输出，都可以作为任意处理环节的输入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可组合的数据变换&lt;/strong&gt;：对应单道组装工序，定义了对数据进行变换的一个&lt;strong&gt;原子&lt;/strong&gt;操作。通过组合各种原子操作，可以具有强大的表达力。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;则，数据处理的本质是：&lt;strong&gt;针对不同需求，读取并标准化数据集后，施加不同的变换组合&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="https://www.qtmuniao.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="data processing" scheme="https://www.qtmuniao.com/tags/data-processing/"/>
    
  </entry>
  
  <entry>
    <title>NUMA-Aware 执行引擎论文解读</title>
    <link href="https://www.qtmuniao.com/2023/08/21/numa-aware-execution-engine/"/>
    <id>https://www.qtmuniao.com/2023/08/21/numa-aware-execution-engine/</id>
    <published>2023-08-21T07:01:39.000Z</published>
    <updated>2023-08-21T07:27:20.623Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近翻 DuckDB 的执行引擎相关的 PPT(&lt;a href=&quot;https://dsdsd.da.cwi.nl/slides/dsdsd-duckdb-push-based-execution.pdf&quot;&gt;Push-Based-Execution&lt;/a&gt;) 时，发现了这篇论文：&lt;a href=&quot;https://15721.courses.cs.cmu.edu/spring2016/papers/p743-leis.pdf&quot;&gt;Morsel-Driven Parallelism: A NUMA-Aware Query Evaluation Framework for the Many-Core Age&lt;/a&gt;。印象中在执行引擎相关的文章中看到他好几次；且 NUMA 架构对于现代数据库架构设计非常重要，但我对此了解尚浅，因此便找来读一读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从题目中也可以看到，论文最主要关键词有两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NUMA-Aware&lt;/li&gt;
&lt;li&gt;Morsel-Driven&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;据此，大致总结下论文的中心思想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多核时代，由于部分 CPU 和部分内存的绑定关系，CPU 访问内存是不均匀（NUMA）的。也即，对于某一个 CPU 核来说，本机上一部分内存访问延迟较低，另一部分内存延迟要高。&lt;/li&gt;
&lt;li&gt;传统火山模型，使用 Exchange 算子来进行并发。其他算子并不感知多线程，因此也就没办法就近内存调度计算（硬件亲和性）。也即，非 NUMA-local。&lt;/li&gt;
&lt;li&gt;为了解决此问题，论文在数据维度：对数据集进行水平分片，一个 NUMA-node 处理一个数据分片；对每个分片进行垂直分段（Morsel），在 Morsel 粒度上进行并发调度和抢占执行。&lt;/li&gt;
&lt;li&gt;在计算维度：为每个 CPU 预分配一个线程，在调度时，每个线程只接受数据块（Morsel）分配到本 NUMA-node 上的任务；当线程间子任务的执行进度不均衡时，快线程会”窃取“本应调度到其他线程的任务，从而保证一个 Query 的多个子任务大约同时完成，而不会出现”长尾“分片。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="论文解读" scheme="https://www.qtmuniao.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="dadtabase" scheme="https://www.qtmuniao.com/tags/dadtabase/"/>
    
      <category term="NUMA" scheme="https://www.qtmuniao.com/tags/NUMA/"/>
    
  </entry>
  
  <entry>
    <title>20230819 B 站求职面试直播</title>
    <link href="https://www.qtmuniao.com/2023/08/19/live-show-infra-interview/"/>
    <id>https://www.qtmuniao.com/2023/08/19/live-show-infra-interview/</id>
    <published>2023-08-19T03:37:59.000Z</published>
    <updated>2024-07-28T00:48:02.107Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是我第一次在 b 站直播分享，录屏地址 &lt;a href=&quot;https://www.bilibili.com/video/BV1Fz4y1u79v&quot;&gt;https://www.bilibili.com/video/BV1Fz4y1u79v&lt;/a&gt; ，主要是从我的求职经历以及面试经历角度聊了一些关于 infra 找工作的注意点，并回答了同学一些现场问题。&lt;/p&gt;
&lt;h1 id=&quot;🐎-求职准备&quot;&gt;&lt;a href=&quot;#🐎-求职准备&quot; class=&quot;headerlink&quot; title=&quot;🐎 求职准备&quot;&gt;&lt;/a&gt;🐎 求职准备&lt;/h1&gt;&lt;h2 id=&quot;软素质&quot;&gt;&lt;a href=&quot;#软素质&quot; class=&quot;headerlink&quot; title=&quot;软素质&quot;&gt;&lt;/a&gt;软素质&lt;/h2&gt;&lt;p&gt;💁‍♂️ &lt;strong&gt;沟通&lt;/strong&gt;。面试时无论是经历描述，系统设计甚至写代码，沟通都是第一位的，这是面试各个环节顺利展开的前提。&lt;/p&gt;
&lt;p&gt;把一件事说清楚：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上下文：先和面试官对齐上下文，不要默认他比你知道的多。&lt;/li&gt;
&lt;li&gt;条理性：背景 → 需求 → 方案 → 挑战点 → 结果&lt;/li&gt;
&lt;li&gt;简洁性：就跟写文章一样，多过几遍就好了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;🧠 &lt;strong&gt;思维&lt;/strong&gt;。主要是&lt;strong&gt;抽象&lt;/strong&gt;和&lt;strong&gt;联想&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;抽象&lt;/strong&gt;。也可以说是归纳，或者叫&lt;strong&gt;知识聚簇&lt;/strong&gt;。以树来做类比，就是遍历几个子节点，抽象出其共通的父节点的特质，然后进而推演出新的子节点。比如调度问题（CPU 调度、分布式任务调度）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;联想&lt;/strong&gt;。也可以说是关联，或者叫&lt;strong&gt;跨域跳联&lt;/strong&gt;。以图来做类比，就是对于几个连通子图，在新的维度上给其建立通路。比如文字是思想的一种序列化。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="职场" scheme="https://www.qtmuniao.com/categories/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="工作" scheme="https://www.qtmuniao.com/categories/%E8%81%8C%E5%9C%BA/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="面试" scheme="https://www.qtmuniao.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="infra" scheme="https://www.qtmuniao.com/tags/infra/"/>
    
  </entry>
  
</feed>
